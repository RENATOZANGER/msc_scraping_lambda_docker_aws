name: Deploy Infrastructure with Terraform

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    
    - name: Login to Amazon ECR
      if: steps.cache.outputs.cache-hit != 'true'  # Skip if credentials were cached
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/lambda_scraping:latest .

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/lambda_scraping:latest

    - name: Get image tags
      id: ecr-describe-images
      run: |
        TAG=$(aws ecr describe-images --repository-name lambda_scraping --query 'sort_by(imageDetails,& imagePushedAt)[-2].imageTags[0]' --output text)
        echo "::set-output name=tag::$TAG"
    
    - name: Delete previous image
      if: steps.ecr-describe-images.outputs.tag != null && steps.ecr-describe-images.outputs.tag != ''
      run: |
        aws ecr batch-delete-image --repository-name lambda_scraping --image-ids imageTag=$tag
        
        

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./infra

    - name: Check Deployment Status
      run: terraform output deployment_status
      id: deployment_status

    - name: Rollback on Failure
      if: ${{ steps.deployment_status.outputs.status != 'success' }}
      run: terraform destroy -auto-approve
      # env:
      #   TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   TF_VAR_aws_region: us-east-1