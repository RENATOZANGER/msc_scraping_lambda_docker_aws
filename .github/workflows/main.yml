name: Deploy Infrastructure with Terraform

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REGION: "us-east-1"
      NAME_REPO: "lambda_scraping"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: $REGION
    
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Check if ECR repository exists
      id: check-ecr-repository
      run: |
        repository_exists=$(aws ecr describe-repositories --repository-names $NAME_REPO --output text --query "repositories")
        echo "::set-output name=repository_exists::$repository_exists"

    - name: Create ECR Repository if not exists
      if: steps.check-ecr-repository.outputs.repository_exists == ''
      run: |
        aws ecr create-repository --repository-name $NAME_REPO --image-scanning-configuration scanOnPush=true --region $REGION
    
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/NAME_REPO:latest .

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/NAME_REPO:latest

    - name: Delete Untagged Images
      run: |
        # delete image without tag
        images=$(aws ecr describe-images --repository-name "$NAME_REPO" --query 'imageDetails[?imageTags == `null`].imageDigest' --output text)
        for image in $images; do
            echo "delete image without tag: $image"
            aws ecr batch-delete-image --repository-name "$NAME_REPO" --image-ids imageDigest="$image"
        done
        
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./infra

    - name: Check Deployment Status
      run: terraform output deployment_status
      id: deployment_status

    - name: Rollback on Failure
      if: ${{ steps.deployment_status.outputs.status != 'success' }}
      run: terraform destroy -auto-approve
      # env:
      #   TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #   TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #   TF_VAR_aws_region: us-east-1