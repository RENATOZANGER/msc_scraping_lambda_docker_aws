name: Deploy Infrastructure with Terraform

env:
  Destroy: "true"
  Region: "us-east-1"
  Name_Lambda: "Scraping-MSC"
  Name_Repo: "lambda_scraping"
  Name_Bucket: "lambda-scraping-remote-state"

on:
  push:
    branches:
      - main 
  pull_request:
    branches:
      - main

jobs:
  destroy:
    runs-on: ubuntu-latest
    if: github.env.Destroy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.Region }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init
        working-directory: ./infra

      - name: Terraform Destroy
        run: terraform destroy -auto-approve
        working-directory: ./infra

  build:
    runs-on: ubuntu-latest
    steps:
    - name: Set output variable
      id: set_variables
      run: echo "NAME_REPO=${{ env.NAME_REPO }}" >> $GITHUB_ENV
    
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.Region }}
    
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Check if ECR repository exists
      id: check-ecr-repository
      run: |
        if aws ecr describe-repositories --repository-names ${{ env.Name_Repo }} >/dev/null 2>&1; then
          echo "::set-output name=repository_exists::true"
        else
          echo "::set-output name=repository_exists::false"
        fi

    - name: Create ECR Repository if not exists
      if: steps.check-ecr-repository.outputs.repository_exists == 'false'
      run: |
        aws ecr create-repository --repository-name ${{ env.Name_Repo }} --image-scanning-configuration scanOnPush=true --region ${{ env.Region }}
    
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.Region }}.amazonaws.com/${{ env.Name_Repo }}:latest .

    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.Region }}.amazonaws.com/${{ env.Name_Repo }}:latest

    - name: Delete Untagged Images
      run: |
        # delete image without tag
        images=$(aws ecr describe-images --repository-name "${{ env.Name_Repo }}" --query 'imageDetails[?imageTags == `null`].imageDigest' --output text)
        for image in $images; do
            echo "delete image without tag: $image"
            aws ecr batch-delete-image --repository-name "${{ env.Name_Repo }}" --image-ids imageDigest="$image"
        done

    - name: Check if bucket exists
      id: check_bucket
      run: |
        if aws s3api head-bucket --bucket ${{ env.Name_Bucket }} 2>/dev/null; then
          echo "::set-output name=bucket_exists::true"
        else
          echo "::set-output name=bucket_exists::false"
        fi

    - name: Create bucket if not exists
      if: steps.check_bucket.outputs.bucket_exists == 'false'
      run: |
        aws s3api create-bucket --bucket ${{ env.Name_Bucket }} --region ${{ env.Region }}
        aws s3api put-bucket-versioning --bucket ${{ env.Name_Bucket }} --versioning-configuration Status=Enabled
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.Region }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Terraform Init
      run: terraform init
      working-directory: ./infra

    - name: Terraform Validate
      run: terraform validate
      working-directory: ./infra

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: ./infra

    - name: Check Deployment Status
      run: terraform output deployment_status
      id: deployment_status

    - name: Rollback on Failure
      if: ${{ steps.deployment_status.outputs.status != 'success' }}
      run: terraform destroy -auto-approve

  update-lambda:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
    
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.Region }}

      - name: Update Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.Name_Lambda }} \
            --image-uri ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.Region }}.amazonaws.com/${{ env.Name_Repo }}:latest
